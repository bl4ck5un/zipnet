enclave {
    from "sgx_tstd.edl" import *;
    from "sgx_stdio.edl" import *;
    from "sgx_backtrace.edl" import *;
    from "sgx_tstdc.edl" import *;
    from "sgx_time.edl" import *;

    include "sgx_tcrypto.h"

    trusted {
      public sgx_status_t ecall_new_sgx_signing_key(
                        [out, size=output_size] uint8_t* output,
                        uint32_t output_size);
      public sgx_status_t ecall_unseal_to_pubkey(
                        [in, size=inp_len] uint8_t* inp,
                        uint32_t inp_len,
                        [out, size=32] uint8_t* outx,
                        [out, size=32] uint8_t* outy);
      public sgx_status_t ecall_create_test_sealed_server_secrets(
                        uint32_t num_of_keys_to_create,
                        [out, size=output_size] uint8_t* output,
                        uint32_t output_size);

      public sgx_status_t test_main_entrance();

      public sgx_status_t ecall_user_submit(
                        [in, size=send_request_size] const uint8_t* send_request,
					    uint32_t send_request_size,
      					[in, size=secrets_size] const uint8_t* secrets,
      					uint32_t secrets_size,
      					[out, size=output_size] uint8_t* output,
					    uint32_t output_size,
					    [out] uint32_t *bytewritten);

      public sgx_status_t ecall_aggregate(
                        [in, size=sign_user_msg_len] const uint8_t* sign_user_msg_ptr,
					    uint32_t sign_user_msg_len,
      					[in, size=current_aggregation_len] const uint8_t* current_aggregation_ptr,
      					uint32_t current_aggregation_len,
                        [in, size=sealed_tee_prv_key_len] uint8_t* sealed_tee_prv_key_ptr,
                        uint32_t sealed_tee_prv_key_len,
      					[out, size=output_size] uint8_t* output_aggregation_ptr,
					    uint32_t output_size,
					    [out] uint32_t *bytewritten);
    };
};
