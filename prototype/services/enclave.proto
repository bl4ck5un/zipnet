syntax = "proto3";

package rpc;

service enclave {
  rpc schedule(SchedulingRequest) returns(SchedulingResponse);
  rpc aggregate(AggregateRequest) returns (AggregateResponse);
}

message SchedulingState {
  uint32 round = 1;                  // round #
  repeated bool reservation_map = 2; // current reservation map
  repeated string footprints = 3;    // current footprint
}

// footprint scheduling
message SchedulingRequest {
  SchedulingState cur_state = 1; // current state
  string cur_dc_message = 2;     // message received from DC.
}

message SchedulingResponse {
  SchedulingState new_state = 1; // new state
  string message_to_broadcast =
      2;          // message to send to DC. TODO: call it scheduling broadcast.
  bool final = 3; // if set, this is the final round. Send message to DC, and
                  // ignore the outcome. (XXX although sending it to DC has no
                  // effect. this seems to be a bug in footprint scheduling.)
  string sig = 4;
}

message UserMessage {
  uint32 round = 1;
  string user_id = 2;
  string user_message = 3;
  string sig = 4;
}

// unused for now
message AggregateRequest{
  UserMessage msg = 1;
  Aggregation current_agg = 4;
}

message Aggregation {
  repeated string user_id_in_aggregation = 1;
  string current_aggregated_value = 2;
  string sig = 3;
}

message AggregateResponse{
  Aggregation new_agg = 1;
}

message Empty {}
