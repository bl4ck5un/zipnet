// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: enclave.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_enclave_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_enclave_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_enclave_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_enclave_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_enclave_2eproto;
namespace rpc {
class AggregateRequest;
class AggregateRequestDefaultTypeInternal;
extern AggregateRequestDefaultTypeInternal _AggregateRequest_default_instance_;
class AggregateResponse;
class AggregateResponseDefaultTypeInternal;
extern AggregateResponseDefaultTypeInternal _AggregateResponse_default_instance_;
class Aggregation;
class AggregationDefaultTypeInternal;
extern AggregationDefaultTypeInternal _Aggregation_default_instance_;
class Attestation;
class AttestationDefaultTypeInternal;
extern AttestationDefaultTypeInternal _Attestation_default_instance_;
class Empty;
class EmptyDefaultTypeInternal;
extern EmptyDefaultTypeInternal _Empty_default_instance_;
class SchedulingRequest;
class SchedulingRequestDefaultTypeInternal;
extern SchedulingRequestDefaultTypeInternal _SchedulingRequest_default_instance_;
class SchedulingResponse;
class SchedulingResponseDefaultTypeInternal;
extern SchedulingResponseDefaultTypeInternal _SchedulingResponse_default_instance_;
class Status;
class StatusDefaultTypeInternal;
extern StatusDefaultTypeInternal _Status_default_instance_;
}  // namespace rpc
PROTOBUF_NAMESPACE_OPEN
template<> ::rpc::AggregateRequest* Arena::CreateMaybeMessage<::rpc::AggregateRequest>(Arena*);
template<> ::rpc::AggregateResponse* Arena::CreateMaybeMessage<::rpc::AggregateResponse>(Arena*);
template<> ::rpc::Aggregation* Arena::CreateMaybeMessage<::rpc::Aggregation>(Arena*);
template<> ::rpc::Attestation* Arena::CreateMaybeMessage<::rpc::Attestation>(Arena*);
template<> ::rpc::Empty* Arena::CreateMaybeMessage<::rpc::Empty>(Arena*);
template<> ::rpc::SchedulingRequest* Arena::CreateMaybeMessage<::rpc::SchedulingRequest>(Arena*);
template<> ::rpc::SchedulingResponse* Arena::CreateMaybeMessage<::rpc::SchedulingResponse>(Arena*);
template<> ::rpc::Status* Arena::CreateMaybeMessage<::rpc::Status>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace rpc {

// ===================================================================

class Attestation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rpc.Attestation) */ {
 public:
  inline Attestation() : Attestation(nullptr) {};
  virtual ~Attestation();

  Attestation(const Attestation& from);
  Attestation(Attestation&& from) noexcept
    : Attestation() {
    *this = ::std::move(from);
  }

  inline Attestation& operator=(const Attestation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Attestation& operator=(Attestation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Attestation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Attestation* internal_default_instance() {
    return reinterpret_cast<const Attestation*>(
               &_Attestation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Attestation& a, Attestation& b) {
    a.Swap(&b);
  }
  inline void Swap(Attestation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Attestation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Attestation* New() const final {
    return CreateMaybeMessage<Attestation>(nullptr);
  }

  Attestation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Attestation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Attestation& from);
  void MergeFrom(const Attestation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Attestation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rpc.Attestation";
  }
  protected:
  explicit Attestation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_enclave_2eproto);
    return ::descriptor_table_enclave_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQuoteFieldNumber = 1,
    kMrEnclaveFieldNumber = 2,
    kErrorFieldNumber = 3,
  };
  // string quote = 1;
  void clear_quote();
  const std::string& quote() const;
  void set_quote(const std::string& value);
  void set_quote(std::string&& value);
  void set_quote(const char* value);
  void set_quote(const char* value, size_t size);
  std::string* mutable_quote();
  std::string* release_quote();
  void set_allocated_quote(std::string* quote);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_quote();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_quote(
      std::string* quote);
  private:
  const std::string& _internal_quote() const;
  void _internal_set_quote(const std::string& value);
  std::string* _internal_mutable_quote();
  public:

  // string mr_enclave = 2;
  void clear_mr_enclave();
  const std::string& mr_enclave() const;
  void set_mr_enclave(const std::string& value);
  void set_mr_enclave(std::string&& value);
  void set_mr_enclave(const char* value);
  void set_mr_enclave(const char* value, size_t size);
  std::string* mutable_mr_enclave();
  std::string* release_mr_enclave();
  void set_allocated_mr_enclave(std::string* mr_enclave);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_mr_enclave();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_mr_enclave(
      std::string* mr_enclave);
  private:
  const std::string& _internal_mr_enclave() const;
  void _internal_set_mr_enclave(const std::string& value);
  std::string* _internal_mutable_mr_enclave();
  public:

  // string error = 3;
  void clear_error();
  const std::string& error() const;
  void set_error(const std::string& value);
  void set_error(std::string&& value);
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  std::string* mutable_error();
  std::string* release_error();
  void set_allocated_error(std::string* error);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_error();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_error(
      std::string* error);
  private:
  const std::string& _internal_error() const;
  void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // @@protoc_insertion_point(class_scope:rpc.Attestation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr quote_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mr_enclave_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_enclave_2eproto;
};
// -------------------------------------------------------------------

class Status PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rpc.Status) */ {
 public:
  inline Status() : Status(nullptr) {};
  virtual ~Status();

  Status(const Status& from);
  Status(Status&& from) noexcept
    : Status() {
    *this = ::std::move(from);
  }

  inline Status& operator=(const Status& from) {
    CopyFrom(from);
    return *this;
  }
  inline Status& operator=(Status&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Status& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Status* internal_default_instance() {
    return reinterpret_cast<const Status*>(
               &_Status_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Status& a, Status& b) {
    a.Swap(&b);
  }
  inline void Swap(Status* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Status* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Status* New() const final {
    return CreateMaybeMessage<Status>(nullptr);
  }

  Status* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Status>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Status& from);
  void MergeFrom(const Status& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Status* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rpc.Status";
  }
  protected:
  explicit Status(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_enclave_2eproto);
    return ::descriptor_table_enclave_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
  };
  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_version();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_version(
      std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // @@protoc_insertion_point(class_scope:rpc.Status)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_enclave_2eproto;
};
// -------------------------------------------------------------------

class SchedulingRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rpc.SchedulingRequest) */ {
 public:
  inline SchedulingRequest() : SchedulingRequest(nullptr) {};
  virtual ~SchedulingRequest();

  SchedulingRequest(const SchedulingRequest& from);
  SchedulingRequest(SchedulingRequest&& from) noexcept
    : SchedulingRequest() {
    *this = ::std::move(from);
  }

  inline SchedulingRequest& operator=(const SchedulingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SchedulingRequest& operator=(SchedulingRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SchedulingRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SchedulingRequest* internal_default_instance() {
    return reinterpret_cast<const SchedulingRequest*>(
               &_SchedulingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SchedulingRequest& a, SchedulingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SchedulingRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SchedulingRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SchedulingRequest* New() const final {
    return CreateMaybeMessage<SchedulingRequest>(nullptr);
  }

  SchedulingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SchedulingRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SchedulingRequest& from);
  void MergeFrom(const SchedulingRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SchedulingRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rpc.SchedulingRequest";
  }
  protected:
  explicit SchedulingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_enclave_2eproto);
    return ::descriptor_table_enclave_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoundFieldNumber = 1,
  };
  // uint32 round = 1;
  void clear_round();
  ::PROTOBUF_NAMESPACE_ID::uint32 round() const;
  void set_round(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_round() const;
  void _internal_set_round(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:rpc.SchedulingRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 round_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_enclave_2eproto;
};
// -------------------------------------------------------------------

class SchedulingResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rpc.SchedulingResponse) */ {
 public:
  inline SchedulingResponse() : SchedulingResponse(nullptr) {};
  virtual ~SchedulingResponse();

  SchedulingResponse(const SchedulingResponse& from);
  SchedulingResponse(SchedulingResponse&& from) noexcept
    : SchedulingResponse() {
    *this = ::std::move(from);
  }

  inline SchedulingResponse& operator=(const SchedulingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SchedulingResponse& operator=(SchedulingResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SchedulingResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SchedulingResponse* internal_default_instance() {
    return reinterpret_cast<const SchedulingResponse*>(
               &_SchedulingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SchedulingResponse& a, SchedulingResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SchedulingResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SchedulingResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SchedulingResponse* New() const final {
    return CreateMaybeMessage<SchedulingResponse>(nullptr);
  }

  SchedulingResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SchedulingResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SchedulingResponse& from);
  void MergeFrom(const SchedulingResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SchedulingResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rpc.SchedulingResponse";
  }
  protected:
  explicit SchedulingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_enclave_2eproto);
    return ::descriptor_table_enclave_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSigFieldNumber = 10,
    kSuccessFieldNumber = 1,
    kRoundFieldNumber = 2,
    kSlotLowFieldNumber = 3,
    kSlowHighFieldNumber = 4,
  };
  // bytes sig = 10;
  void clear_sig();
  const std::string& sig() const;
  void set_sig(const std::string& value);
  void set_sig(std::string&& value);
  void set_sig(const char* value);
  void set_sig(const void* value, size_t size);
  std::string* mutable_sig();
  std::string* release_sig();
  void set_allocated_sig(std::string* sig);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_sig();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_sig(
      std::string* sig);
  private:
  const std::string& _internal_sig() const;
  void _internal_set_sig(const std::string& value);
  std::string* _internal_mutable_sig();
  public:

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // uint32 round = 2;
  void clear_round();
  ::PROTOBUF_NAMESPACE_ID::uint32 round() const;
  void set_round(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_round() const;
  void _internal_set_round(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 slot_low = 3;
  void clear_slot_low();
  ::PROTOBUF_NAMESPACE_ID::uint32 slot_low() const;
  void set_slot_low(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_slot_low() const;
  void _internal_set_slot_low(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 slow_high = 4;
  void clear_slow_high();
  ::PROTOBUF_NAMESPACE_ID::uint32 slow_high() const;
  void set_slow_high(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_slow_high() const;
  void _internal_set_slow_high(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:rpc.SchedulingResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sig_;
  bool success_;
  ::PROTOBUF_NAMESPACE_ID::uint32 round_;
  ::PROTOBUF_NAMESPACE_ID::uint32 slot_low_;
  ::PROTOBUF_NAMESPACE_ID::uint32 slow_high_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_enclave_2eproto;
};
// -------------------------------------------------------------------

class AggregateRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rpc.AggregateRequest) */ {
 public:
  inline AggregateRequest() : AggregateRequest(nullptr) {};
  virtual ~AggregateRequest();

  AggregateRequest(const AggregateRequest& from);
  AggregateRequest(AggregateRequest&& from) noexcept
    : AggregateRequest() {
    *this = ::std::move(from);
  }

  inline AggregateRequest& operator=(const AggregateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AggregateRequest& operator=(AggregateRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AggregateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AggregateRequest* internal_default_instance() {
    return reinterpret_cast<const AggregateRequest*>(
               &_AggregateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AggregateRequest& a, AggregateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AggregateRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AggregateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AggregateRequest* New() const final {
    return CreateMaybeMessage<AggregateRequest>(nullptr);
  }

  AggregateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AggregateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AggregateRequest& from);
  void MergeFrom(const AggregateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AggregateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rpc.AggregateRequest";
  }
  protected:
  explicit AggregateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_enclave_2eproto);
    return ::descriptor_table_enclave_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 2,
    kUserMessageFieldNumber = 3,
    kCurrentAggFieldNumber = 4,
    kRoundFieldNumber = 1,
  };
  // bytes user_id = 2;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const void* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_user_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_user_id(
      std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // bytes user_message = 3;
  void clear_user_message();
  const std::string& user_message() const;
  void set_user_message(const std::string& value);
  void set_user_message(std::string&& value);
  void set_user_message(const char* value);
  void set_user_message(const void* value, size_t size);
  std::string* mutable_user_message();
  std::string* release_user_message();
  void set_allocated_user_message(std::string* user_message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_user_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_user_message(
      std::string* user_message);
  private:
  const std::string& _internal_user_message() const;
  void _internal_set_user_message(const std::string& value);
  std::string* _internal_mutable_user_message();
  public:

  // .rpc.Aggregation current_agg = 4;
  bool has_current_agg() const;
  private:
  bool _internal_has_current_agg() const;
  public:
  void clear_current_agg();
  const ::rpc::Aggregation& current_agg() const;
  ::rpc::Aggregation* release_current_agg();
  ::rpc::Aggregation* mutable_current_agg();
  void set_allocated_current_agg(::rpc::Aggregation* current_agg);
  private:
  const ::rpc::Aggregation& _internal_current_agg() const;
  ::rpc::Aggregation* _internal_mutable_current_agg();
  public:
  void unsafe_arena_set_allocated_current_agg(
      ::rpc::Aggregation* current_agg);
  ::rpc::Aggregation* unsafe_arena_release_current_agg();

  // uint32 round = 1;
  void clear_round();
  ::PROTOBUF_NAMESPACE_ID::uint32 round() const;
  void set_round(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_round() const;
  void _internal_set_round(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:rpc.AggregateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_message_;
  ::rpc::Aggregation* current_agg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 round_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_enclave_2eproto;
};
// -------------------------------------------------------------------

class Aggregation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rpc.Aggregation) */ {
 public:
  inline Aggregation() : Aggregation(nullptr) {};
  virtual ~Aggregation();

  Aggregation(const Aggregation& from);
  Aggregation(Aggregation&& from) noexcept
    : Aggregation() {
    *this = ::std::move(from);
  }

  inline Aggregation& operator=(const Aggregation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Aggregation& operator=(Aggregation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Aggregation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Aggregation* internal_default_instance() {
    return reinterpret_cast<const Aggregation*>(
               &_Aggregation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Aggregation& a, Aggregation& b) {
    a.Swap(&b);
  }
  inline void Swap(Aggregation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Aggregation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Aggregation* New() const final {
    return CreateMaybeMessage<Aggregation>(nullptr);
  }

  Aggregation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Aggregation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Aggregation& from);
  void MergeFrom(const Aggregation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Aggregation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rpc.Aggregation";
  }
  protected:
  explicit Aggregation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_enclave_2eproto);
    return ::descriptor_table_enclave_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdInAggregationFieldNumber = 1,
    kCurrentAggregatedValueFieldNumber = 2,
    kSigFieldNumber = 3,
  };
  // repeated bytes user_id_in_aggregation = 1;
  int user_id_in_aggregation_size() const;
  private:
  int _internal_user_id_in_aggregation_size() const;
  public:
  void clear_user_id_in_aggregation();
  const std::string& user_id_in_aggregation(int index) const;
  std::string* mutable_user_id_in_aggregation(int index);
  void set_user_id_in_aggregation(int index, const std::string& value);
  void set_user_id_in_aggregation(int index, std::string&& value);
  void set_user_id_in_aggregation(int index, const char* value);
  void set_user_id_in_aggregation(int index, const void* value, size_t size);
  std::string* add_user_id_in_aggregation();
  void add_user_id_in_aggregation(const std::string& value);
  void add_user_id_in_aggregation(std::string&& value);
  void add_user_id_in_aggregation(const char* value);
  void add_user_id_in_aggregation(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& user_id_in_aggregation() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_user_id_in_aggregation();
  private:
  const std::string& _internal_user_id_in_aggregation(int index) const;
  std::string* _internal_add_user_id_in_aggregation();
  public:

  // bytes current_aggregated_value = 2;
  void clear_current_aggregated_value();
  const std::string& current_aggregated_value() const;
  void set_current_aggregated_value(const std::string& value);
  void set_current_aggregated_value(std::string&& value);
  void set_current_aggregated_value(const char* value);
  void set_current_aggregated_value(const void* value, size_t size);
  std::string* mutable_current_aggregated_value();
  std::string* release_current_aggregated_value();
  void set_allocated_current_aggregated_value(std::string* current_aggregated_value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_current_aggregated_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_current_aggregated_value(
      std::string* current_aggregated_value);
  private:
  const std::string& _internal_current_aggregated_value() const;
  void _internal_set_current_aggregated_value(const std::string& value);
  std::string* _internal_mutable_current_aggregated_value();
  public:

  // bytes sig = 3;
  void clear_sig();
  const std::string& sig() const;
  void set_sig(const std::string& value);
  void set_sig(std::string&& value);
  void set_sig(const char* value);
  void set_sig(const void* value, size_t size);
  std::string* mutable_sig();
  std::string* release_sig();
  void set_allocated_sig(std::string* sig);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_sig();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_sig(
      std::string* sig);
  private:
  const std::string& _internal_sig() const;
  void _internal_set_sig(const std::string& value);
  std::string* _internal_mutable_sig();
  public:

  // @@protoc_insertion_point(class_scope:rpc.Aggregation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> user_id_in_aggregation_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr current_aggregated_value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sig_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_enclave_2eproto;
};
// -------------------------------------------------------------------

class AggregateResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rpc.AggregateResponse) */ {
 public:
  inline AggregateResponse() : AggregateResponse(nullptr) {};
  virtual ~AggregateResponse();

  AggregateResponse(const AggregateResponse& from);
  AggregateResponse(AggregateResponse&& from) noexcept
    : AggregateResponse() {
    *this = ::std::move(from);
  }

  inline AggregateResponse& operator=(const AggregateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AggregateResponse& operator=(AggregateResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AggregateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AggregateResponse* internal_default_instance() {
    return reinterpret_cast<const AggregateResponse*>(
               &_AggregateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(AggregateResponse& a, AggregateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AggregateResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AggregateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AggregateResponse* New() const final {
    return CreateMaybeMessage<AggregateResponse>(nullptr);
  }

  AggregateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AggregateResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AggregateResponse& from);
  void MergeFrom(const AggregateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AggregateResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rpc.AggregateResponse";
  }
  protected:
  explicit AggregateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_enclave_2eproto);
    return ::descriptor_table_enclave_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNewAggFieldNumber = 1,
  };
  // .rpc.Aggregation new_agg = 1;
  bool has_new_agg() const;
  private:
  bool _internal_has_new_agg() const;
  public:
  void clear_new_agg();
  const ::rpc::Aggregation& new_agg() const;
  ::rpc::Aggregation* release_new_agg();
  ::rpc::Aggregation* mutable_new_agg();
  void set_allocated_new_agg(::rpc::Aggregation* new_agg);
  private:
  const ::rpc::Aggregation& _internal_new_agg() const;
  ::rpc::Aggregation* _internal_mutable_new_agg();
  public:
  void unsafe_arena_set_allocated_new_agg(
      ::rpc::Aggregation* new_agg);
  ::rpc::Aggregation* unsafe_arena_release_new_agg();

  // @@protoc_insertion_point(class_scope:rpc.AggregateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::rpc::Aggregation* new_agg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_enclave_2eproto;
};
// -------------------------------------------------------------------

class Empty PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rpc.Empty) */ {
 public:
  inline Empty() : Empty(nullptr) {};
  virtual ~Empty();

  Empty(const Empty& from);
  Empty(Empty&& from) noexcept
    : Empty() {
    *this = ::std::move(from);
  }

  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }
  inline Empty& operator=(Empty&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Empty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Empty* internal_default_instance() {
    return reinterpret_cast<const Empty*>(
               &_Empty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Empty& a, Empty& b) {
    a.Swap(&b);
  }
  inline void Swap(Empty* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Empty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Empty* New() const final {
    return CreateMaybeMessage<Empty>(nullptr);
  }

  Empty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Empty>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Empty& from);
  void MergeFrom(const Empty& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Empty* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rpc.Empty";
  }
  protected:
  explicit Empty(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_enclave_2eproto);
    return ::descriptor_table_enclave_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:rpc.Empty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_enclave_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Attestation

// string quote = 1;
inline void Attestation::clear_quote() {
  quote_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Attestation::quote() const {
  // @@protoc_insertion_point(field_get:rpc.Attestation.quote)
  return _internal_quote();
}
inline void Attestation::set_quote(const std::string& value) {
  _internal_set_quote(value);
  // @@protoc_insertion_point(field_set:rpc.Attestation.quote)
}
inline std::string* Attestation::mutable_quote() {
  // @@protoc_insertion_point(field_mutable:rpc.Attestation.quote)
  return _internal_mutable_quote();
}
inline const std::string& Attestation::_internal_quote() const {
  return quote_.Get();
}
inline void Attestation::_internal_set_quote(const std::string& value) {
  
  quote_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Attestation::set_quote(std::string&& value) {
  
  quote_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rpc.Attestation.quote)
}
inline void Attestation::set_quote(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  quote_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rpc.Attestation.quote)
}
inline void Attestation::set_quote(const char* value,
    size_t size) {
  
  quote_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rpc.Attestation.quote)
}
inline std::string* Attestation::_internal_mutable_quote() {
  
  return quote_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Attestation::release_quote() {
  // @@protoc_insertion_point(field_release:rpc.Attestation.quote)
  return quote_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Attestation::set_allocated_quote(std::string* quote) {
  if (quote != nullptr) {
    
  } else {
    
  }
  quote_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), quote,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rpc.Attestation.quote)
}
inline std::string* Attestation::unsafe_arena_release_quote() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rpc.Attestation.quote)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return quote_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Attestation::unsafe_arena_set_allocated_quote(
    std::string* quote) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (quote != nullptr) {
    
  } else {
    
  }
  quote_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      quote, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rpc.Attestation.quote)
}

// string mr_enclave = 2;
inline void Attestation::clear_mr_enclave() {
  mr_enclave_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Attestation::mr_enclave() const {
  // @@protoc_insertion_point(field_get:rpc.Attestation.mr_enclave)
  return _internal_mr_enclave();
}
inline void Attestation::set_mr_enclave(const std::string& value) {
  _internal_set_mr_enclave(value);
  // @@protoc_insertion_point(field_set:rpc.Attestation.mr_enclave)
}
inline std::string* Attestation::mutable_mr_enclave() {
  // @@protoc_insertion_point(field_mutable:rpc.Attestation.mr_enclave)
  return _internal_mutable_mr_enclave();
}
inline const std::string& Attestation::_internal_mr_enclave() const {
  return mr_enclave_.Get();
}
inline void Attestation::_internal_set_mr_enclave(const std::string& value) {
  
  mr_enclave_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Attestation::set_mr_enclave(std::string&& value) {
  
  mr_enclave_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rpc.Attestation.mr_enclave)
}
inline void Attestation::set_mr_enclave(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mr_enclave_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rpc.Attestation.mr_enclave)
}
inline void Attestation::set_mr_enclave(const char* value,
    size_t size) {
  
  mr_enclave_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rpc.Attestation.mr_enclave)
}
inline std::string* Attestation::_internal_mutable_mr_enclave() {
  
  return mr_enclave_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Attestation::release_mr_enclave() {
  // @@protoc_insertion_point(field_release:rpc.Attestation.mr_enclave)
  return mr_enclave_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Attestation::set_allocated_mr_enclave(std::string* mr_enclave) {
  if (mr_enclave != nullptr) {
    
  } else {
    
  }
  mr_enclave_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mr_enclave,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rpc.Attestation.mr_enclave)
}
inline std::string* Attestation::unsafe_arena_release_mr_enclave() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rpc.Attestation.mr_enclave)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return mr_enclave_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Attestation::unsafe_arena_set_allocated_mr_enclave(
    std::string* mr_enclave) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (mr_enclave != nullptr) {
    
  } else {
    
  }
  mr_enclave_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      mr_enclave, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rpc.Attestation.mr_enclave)
}

// string error = 3;
inline void Attestation::clear_error() {
  error_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Attestation::error() const {
  // @@protoc_insertion_point(field_get:rpc.Attestation.error)
  return _internal_error();
}
inline void Attestation::set_error(const std::string& value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:rpc.Attestation.error)
}
inline std::string* Attestation::mutable_error() {
  // @@protoc_insertion_point(field_mutable:rpc.Attestation.error)
  return _internal_mutable_error();
}
inline const std::string& Attestation::_internal_error() const {
  return error_.Get();
}
inline void Attestation::_internal_set_error(const std::string& value) {
  
  error_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Attestation::set_error(std::string&& value) {
  
  error_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rpc.Attestation.error)
}
inline void Attestation::set_error(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rpc.Attestation.error)
}
inline void Attestation::set_error(const char* value,
    size_t size) {
  
  error_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rpc.Attestation.error)
}
inline std::string* Attestation::_internal_mutable_error() {
  
  return error_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Attestation::release_error() {
  // @@protoc_insertion_point(field_release:rpc.Attestation.error)
  return error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Attestation::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rpc.Attestation.error)
}
inline std::string* Attestation::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rpc.Attestation.error)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return error_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Attestation::unsafe_arena_set_allocated_error(
    std::string* error) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (error != nullptr) {
    
  } else {
    
  }
  error_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      error, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rpc.Attestation.error)
}

// -------------------------------------------------------------------

// Status

// string version = 1;
inline void Status::clear_version() {
  version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Status::version() const {
  // @@protoc_insertion_point(field_get:rpc.Status.version)
  return _internal_version();
}
inline void Status::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:rpc.Status.version)
}
inline std::string* Status::mutable_version() {
  // @@protoc_insertion_point(field_mutable:rpc.Status.version)
  return _internal_mutable_version();
}
inline const std::string& Status::_internal_version() const {
  return version_.Get();
}
inline void Status::_internal_set_version(const std::string& value) {
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Status::set_version(std::string&& value) {
  
  version_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rpc.Status.version)
}
inline void Status::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rpc.Status.version)
}
inline void Status::set_version(const char* value,
    size_t size) {
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rpc.Status.version)
}
inline std::string* Status::_internal_mutable_version() {
  
  return version_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Status::release_version() {
  // @@protoc_insertion_point(field_release:rpc.Status.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Status::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rpc.Status.version)
}
inline std::string* Status::unsafe_arena_release_version() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rpc.Status.version)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return version_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Status::unsafe_arena_set_allocated_version(
    std::string* version) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (version != nullptr) {
    
  } else {
    
  }
  version_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      version, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rpc.Status.version)
}

// -------------------------------------------------------------------

// SchedulingRequest

// uint32 round = 1;
inline void SchedulingRequest::clear_round() {
  round_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SchedulingRequest::_internal_round() const {
  return round_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SchedulingRequest::round() const {
  // @@protoc_insertion_point(field_get:rpc.SchedulingRequest.round)
  return _internal_round();
}
inline void SchedulingRequest::_internal_set_round(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  round_ = value;
}
inline void SchedulingRequest::set_round(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_round(value);
  // @@protoc_insertion_point(field_set:rpc.SchedulingRequest.round)
}

// -------------------------------------------------------------------

// SchedulingResponse

// bool success = 1;
inline void SchedulingResponse::clear_success() {
  success_ = false;
}
inline bool SchedulingResponse::_internal_success() const {
  return success_;
}
inline bool SchedulingResponse::success() const {
  // @@protoc_insertion_point(field_get:rpc.SchedulingResponse.success)
  return _internal_success();
}
inline void SchedulingResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void SchedulingResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:rpc.SchedulingResponse.success)
}

// uint32 round = 2;
inline void SchedulingResponse::clear_round() {
  round_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SchedulingResponse::_internal_round() const {
  return round_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SchedulingResponse::round() const {
  // @@protoc_insertion_point(field_get:rpc.SchedulingResponse.round)
  return _internal_round();
}
inline void SchedulingResponse::_internal_set_round(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  round_ = value;
}
inline void SchedulingResponse::set_round(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_round(value);
  // @@protoc_insertion_point(field_set:rpc.SchedulingResponse.round)
}

// uint32 slot_low = 3;
inline void SchedulingResponse::clear_slot_low() {
  slot_low_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SchedulingResponse::_internal_slot_low() const {
  return slot_low_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SchedulingResponse::slot_low() const {
  // @@protoc_insertion_point(field_get:rpc.SchedulingResponse.slot_low)
  return _internal_slot_low();
}
inline void SchedulingResponse::_internal_set_slot_low(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  slot_low_ = value;
}
inline void SchedulingResponse::set_slot_low(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_slot_low(value);
  // @@protoc_insertion_point(field_set:rpc.SchedulingResponse.slot_low)
}

// uint32 slow_high = 4;
inline void SchedulingResponse::clear_slow_high() {
  slow_high_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SchedulingResponse::_internal_slow_high() const {
  return slow_high_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SchedulingResponse::slow_high() const {
  // @@protoc_insertion_point(field_get:rpc.SchedulingResponse.slow_high)
  return _internal_slow_high();
}
inline void SchedulingResponse::_internal_set_slow_high(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  slow_high_ = value;
}
inline void SchedulingResponse::set_slow_high(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_slow_high(value);
  // @@protoc_insertion_point(field_set:rpc.SchedulingResponse.slow_high)
}

// bytes sig = 10;
inline void SchedulingResponse::clear_sig() {
  sig_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SchedulingResponse::sig() const {
  // @@protoc_insertion_point(field_get:rpc.SchedulingResponse.sig)
  return _internal_sig();
}
inline void SchedulingResponse::set_sig(const std::string& value) {
  _internal_set_sig(value);
  // @@protoc_insertion_point(field_set:rpc.SchedulingResponse.sig)
}
inline std::string* SchedulingResponse::mutable_sig() {
  // @@protoc_insertion_point(field_mutable:rpc.SchedulingResponse.sig)
  return _internal_mutable_sig();
}
inline const std::string& SchedulingResponse::_internal_sig() const {
  return sig_.Get();
}
inline void SchedulingResponse::_internal_set_sig(const std::string& value) {
  
  sig_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SchedulingResponse::set_sig(std::string&& value) {
  
  sig_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rpc.SchedulingResponse.sig)
}
inline void SchedulingResponse::set_sig(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sig_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rpc.SchedulingResponse.sig)
}
inline void SchedulingResponse::set_sig(const void* value,
    size_t size) {
  
  sig_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rpc.SchedulingResponse.sig)
}
inline std::string* SchedulingResponse::_internal_mutable_sig() {
  
  return sig_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SchedulingResponse::release_sig() {
  // @@protoc_insertion_point(field_release:rpc.SchedulingResponse.sig)
  return sig_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SchedulingResponse::set_allocated_sig(std::string* sig) {
  if (sig != nullptr) {
    
  } else {
    
  }
  sig_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sig,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rpc.SchedulingResponse.sig)
}
inline std::string* SchedulingResponse::unsafe_arena_release_sig() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rpc.SchedulingResponse.sig)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return sig_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SchedulingResponse::unsafe_arena_set_allocated_sig(
    std::string* sig) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (sig != nullptr) {
    
  } else {
    
  }
  sig_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      sig, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rpc.SchedulingResponse.sig)
}

// -------------------------------------------------------------------

// AggregateRequest

// uint32 round = 1;
inline void AggregateRequest::clear_round() {
  round_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AggregateRequest::_internal_round() const {
  return round_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AggregateRequest::round() const {
  // @@protoc_insertion_point(field_get:rpc.AggregateRequest.round)
  return _internal_round();
}
inline void AggregateRequest::_internal_set_round(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  round_ = value;
}
inline void AggregateRequest::set_round(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_round(value);
  // @@protoc_insertion_point(field_set:rpc.AggregateRequest.round)
}

// bytes user_id = 2;
inline void AggregateRequest::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AggregateRequest::user_id() const {
  // @@protoc_insertion_point(field_get:rpc.AggregateRequest.user_id)
  return _internal_user_id();
}
inline void AggregateRequest::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:rpc.AggregateRequest.user_id)
}
inline std::string* AggregateRequest::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:rpc.AggregateRequest.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& AggregateRequest::_internal_user_id() const {
  return user_id_.Get();
}
inline void AggregateRequest::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AggregateRequest::set_user_id(std::string&& value) {
  
  user_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rpc.AggregateRequest.user_id)
}
inline void AggregateRequest::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rpc.AggregateRequest.user_id)
}
inline void AggregateRequest::set_user_id(const void* value,
    size_t size) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rpc.AggregateRequest.user_id)
}
inline std::string* AggregateRequest::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AggregateRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:rpc.AggregateRequest.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AggregateRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rpc.AggregateRequest.user_id)
}
inline std::string* AggregateRequest::unsafe_arena_release_user_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rpc.AggregateRequest.user_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return user_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AggregateRequest::unsafe_arena_set_allocated_user_id(
    std::string* user_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      user_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rpc.AggregateRequest.user_id)
}

// bytes user_message = 3;
inline void AggregateRequest::clear_user_message() {
  user_message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AggregateRequest::user_message() const {
  // @@protoc_insertion_point(field_get:rpc.AggregateRequest.user_message)
  return _internal_user_message();
}
inline void AggregateRequest::set_user_message(const std::string& value) {
  _internal_set_user_message(value);
  // @@protoc_insertion_point(field_set:rpc.AggregateRequest.user_message)
}
inline std::string* AggregateRequest::mutable_user_message() {
  // @@protoc_insertion_point(field_mutable:rpc.AggregateRequest.user_message)
  return _internal_mutable_user_message();
}
inline const std::string& AggregateRequest::_internal_user_message() const {
  return user_message_.Get();
}
inline void AggregateRequest::_internal_set_user_message(const std::string& value) {
  
  user_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AggregateRequest::set_user_message(std::string&& value) {
  
  user_message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rpc.AggregateRequest.user_message)
}
inline void AggregateRequest::set_user_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rpc.AggregateRequest.user_message)
}
inline void AggregateRequest::set_user_message(const void* value,
    size_t size) {
  
  user_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rpc.AggregateRequest.user_message)
}
inline std::string* AggregateRequest::_internal_mutable_user_message() {
  
  return user_message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AggregateRequest::release_user_message() {
  // @@protoc_insertion_point(field_release:rpc.AggregateRequest.user_message)
  return user_message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AggregateRequest::set_allocated_user_message(std::string* user_message) {
  if (user_message != nullptr) {
    
  } else {
    
  }
  user_message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rpc.AggregateRequest.user_message)
}
inline std::string* AggregateRequest::unsafe_arena_release_user_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rpc.AggregateRequest.user_message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return user_message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AggregateRequest::unsafe_arena_set_allocated_user_message(
    std::string* user_message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (user_message != nullptr) {
    
  } else {
    
  }
  user_message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      user_message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rpc.AggregateRequest.user_message)
}

// .rpc.Aggregation current_agg = 4;
inline bool AggregateRequest::_internal_has_current_agg() const {
  return this != internal_default_instance() && current_agg_ != nullptr;
}
inline bool AggregateRequest::has_current_agg() const {
  return _internal_has_current_agg();
}
inline void AggregateRequest::clear_current_agg() {
  if (GetArena() == nullptr && current_agg_ != nullptr) {
    delete current_agg_;
  }
  current_agg_ = nullptr;
}
inline const ::rpc::Aggregation& AggregateRequest::_internal_current_agg() const {
  const ::rpc::Aggregation* p = current_agg_;
  return p != nullptr ? *p : *reinterpret_cast<const ::rpc::Aggregation*>(
      &::rpc::_Aggregation_default_instance_);
}
inline const ::rpc::Aggregation& AggregateRequest::current_agg() const {
  // @@protoc_insertion_point(field_get:rpc.AggregateRequest.current_agg)
  return _internal_current_agg();
}
inline void AggregateRequest::unsafe_arena_set_allocated_current_agg(
    ::rpc::Aggregation* current_agg) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(current_agg_);
  }
  current_agg_ = current_agg;
  if (current_agg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rpc.AggregateRequest.current_agg)
}
inline ::rpc::Aggregation* AggregateRequest::release_current_agg() {
  auto temp = unsafe_arena_release_current_agg();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::rpc::Aggregation* AggregateRequest::unsafe_arena_release_current_agg() {
  // @@protoc_insertion_point(field_release:rpc.AggregateRequest.current_agg)
  
  ::rpc::Aggregation* temp = current_agg_;
  current_agg_ = nullptr;
  return temp;
}
inline ::rpc::Aggregation* AggregateRequest::_internal_mutable_current_agg() {
  
  if (current_agg_ == nullptr) {
    auto* p = CreateMaybeMessage<::rpc::Aggregation>(GetArena());
    current_agg_ = p;
  }
  return current_agg_;
}
inline ::rpc::Aggregation* AggregateRequest::mutable_current_agg() {
  // @@protoc_insertion_point(field_mutable:rpc.AggregateRequest.current_agg)
  return _internal_mutable_current_agg();
}
inline void AggregateRequest::set_allocated_current_agg(::rpc::Aggregation* current_agg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete current_agg_;
  }
  if (current_agg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(current_agg);
    if (message_arena != submessage_arena) {
      current_agg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, current_agg, submessage_arena);
    }
    
  } else {
    
  }
  current_agg_ = current_agg;
  // @@protoc_insertion_point(field_set_allocated:rpc.AggregateRequest.current_agg)
}

// -------------------------------------------------------------------

// Aggregation

// repeated bytes user_id_in_aggregation = 1;
inline int Aggregation::_internal_user_id_in_aggregation_size() const {
  return user_id_in_aggregation_.size();
}
inline int Aggregation::user_id_in_aggregation_size() const {
  return _internal_user_id_in_aggregation_size();
}
inline void Aggregation::clear_user_id_in_aggregation() {
  user_id_in_aggregation_.Clear();
}
inline std::string* Aggregation::add_user_id_in_aggregation() {
  // @@protoc_insertion_point(field_add_mutable:rpc.Aggregation.user_id_in_aggregation)
  return _internal_add_user_id_in_aggregation();
}
inline const std::string& Aggregation::_internal_user_id_in_aggregation(int index) const {
  return user_id_in_aggregation_.Get(index);
}
inline const std::string& Aggregation::user_id_in_aggregation(int index) const {
  // @@protoc_insertion_point(field_get:rpc.Aggregation.user_id_in_aggregation)
  return _internal_user_id_in_aggregation(index);
}
inline std::string* Aggregation::mutable_user_id_in_aggregation(int index) {
  // @@protoc_insertion_point(field_mutable:rpc.Aggregation.user_id_in_aggregation)
  return user_id_in_aggregation_.Mutable(index);
}
inline void Aggregation::set_user_id_in_aggregation(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:rpc.Aggregation.user_id_in_aggregation)
  user_id_in_aggregation_.Mutable(index)->assign(value);
}
inline void Aggregation::set_user_id_in_aggregation(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:rpc.Aggregation.user_id_in_aggregation)
  user_id_in_aggregation_.Mutable(index)->assign(std::move(value));
}
inline void Aggregation::set_user_id_in_aggregation(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  user_id_in_aggregation_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:rpc.Aggregation.user_id_in_aggregation)
}
inline void Aggregation::set_user_id_in_aggregation(int index, const void* value, size_t size) {
  user_id_in_aggregation_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:rpc.Aggregation.user_id_in_aggregation)
}
inline std::string* Aggregation::_internal_add_user_id_in_aggregation() {
  return user_id_in_aggregation_.Add();
}
inline void Aggregation::add_user_id_in_aggregation(const std::string& value) {
  user_id_in_aggregation_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:rpc.Aggregation.user_id_in_aggregation)
}
inline void Aggregation::add_user_id_in_aggregation(std::string&& value) {
  user_id_in_aggregation_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:rpc.Aggregation.user_id_in_aggregation)
}
inline void Aggregation::add_user_id_in_aggregation(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  user_id_in_aggregation_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:rpc.Aggregation.user_id_in_aggregation)
}
inline void Aggregation::add_user_id_in_aggregation(const void* value, size_t size) {
  user_id_in_aggregation_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:rpc.Aggregation.user_id_in_aggregation)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Aggregation::user_id_in_aggregation() const {
  // @@protoc_insertion_point(field_list:rpc.Aggregation.user_id_in_aggregation)
  return user_id_in_aggregation_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Aggregation::mutable_user_id_in_aggregation() {
  // @@protoc_insertion_point(field_mutable_list:rpc.Aggregation.user_id_in_aggregation)
  return &user_id_in_aggregation_;
}

// bytes current_aggregated_value = 2;
inline void Aggregation::clear_current_aggregated_value() {
  current_aggregated_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Aggregation::current_aggregated_value() const {
  // @@protoc_insertion_point(field_get:rpc.Aggregation.current_aggregated_value)
  return _internal_current_aggregated_value();
}
inline void Aggregation::set_current_aggregated_value(const std::string& value) {
  _internal_set_current_aggregated_value(value);
  // @@protoc_insertion_point(field_set:rpc.Aggregation.current_aggregated_value)
}
inline std::string* Aggregation::mutable_current_aggregated_value() {
  // @@protoc_insertion_point(field_mutable:rpc.Aggregation.current_aggregated_value)
  return _internal_mutable_current_aggregated_value();
}
inline const std::string& Aggregation::_internal_current_aggregated_value() const {
  return current_aggregated_value_.Get();
}
inline void Aggregation::_internal_set_current_aggregated_value(const std::string& value) {
  
  current_aggregated_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Aggregation::set_current_aggregated_value(std::string&& value) {
  
  current_aggregated_value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rpc.Aggregation.current_aggregated_value)
}
inline void Aggregation::set_current_aggregated_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  current_aggregated_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rpc.Aggregation.current_aggregated_value)
}
inline void Aggregation::set_current_aggregated_value(const void* value,
    size_t size) {
  
  current_aggregated_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rpc.Aggregation.current_aggregated_value)
}
inline std::string* Aggregation::_internal_mutable_current_aggregated_value() {
  
  return current_aggregated_value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Aggregation::release_current_aggregated_value() {
  // @@protoc_insertion_point(field_release:rpc.Aggregation.current_aggregated_value)
  return current_aggregated_value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Aggregation::set_allocated_current_aggregated_value(std::string* current_aggregated_value) {
  if (current_aggregated_value != nullptr) {
    
  } else {
    
  }
  current_aggregated_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), current_aggregated_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rpc.Aggregation.current_aggregated_value)
}
inline std::string* Aggregation::unsafe_arena_release_current_aggregated_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rpc.Aggregation.current_aggregated_value)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return current_aggregated_value_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Aggregation::unsafe_arena_set_allocated_current_aggregated_value(
    std::string* current_aggregated_value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (current_aggregated_value != nullptr) {
    
  } else {
    
  }
  current_aggregated_value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      current_aggregated_value, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rpc.Aggregation.current_aggregated_value)
}

// bytes sig = 3;
inline void Aggregation::clear_sig() {
  sig_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Aggregation::sig() const {
  // @@protoc_insertion_point(field_get:rpc.Aggregation.sig)
  return _internal_sig();
}
inline void Aggregation::set_sig(const std::string& value) {
  _internal_set_sig(value);
  // @@protoc_insertion_point(field_set:rpc.Aggregation.sig)
}
inline std::string* Aggregation::mutable_sig() {
  // @@protoc_insertion_point(field_mutable:rpc.Aggregation.sig)
  return _internal_mutable_sig();
}
inline const std::string& Aggregation::_internal_sig() const {
  return sig_.Get();
}
inline void Aggregation::_internal_set_sig(const std::string& value) {
  
  sig_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Aggregation::set_sig(std::string&& value) {
  
  sig_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rpc.Aggregation.sig)
}
inline void Aggregation::set_sig(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sig_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rpc.Aggregation.sig)
}
inline void Aggregation::set_sig(const void* value,
    size_t size) {
  
  sig_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rpc.Aggregation.sig)
}
inline std::string* Aggregation::_internal_mutable_sig() {
  
  return sig_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Aggregation::release_sig() {
  // @@protoc_insertion_point(field_release:rpc.Aggregation.sig)
  return sig_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Aggregation::set_allocated_sig(std::string* sig) {
  if (sig != nullptr) {
    
  } else {
    
  }
  sig_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sig,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rpc.Aggregation.sig)
}
inline std::string* Aggregation::unsafe_arena_release_sig() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rpc.Aggregation.sig)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return sig_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Aggregation::unsafe_arena_set_allocated_sig(
    std::string* sig) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (sig != nullptr) {
    
  } else {
    
  }
  sig_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      sig, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rpc.Aggregation.sig)
}

// -------------------------------------------------------------------

// AggregateResponse

// .rpc.Aggregation new_agg = 1;
inline bool AggregateResponse::_internal_has_new_agg() const {
  return this != internal_default_instance() && new_agg_ != nullptr;
}
inline bool AggregateResponse::has_new_agg() const {
  return _internal_has_new_agg();
}
inline void AggregateResponse::clear_new_agg() {
  if (GetArena() == nullptr && new_agg_ != nullptr) {
    delete new_agg_;
  }
  new_agg_ = nullptr;
}
inline const ::rpc::Aggregation& AggregateResponse::_internal_new_agg() const {
  const ::rpc::Aggregation* p = new_agg_;
  return p != nullptr ? *p : *reinterpret_cast<const ::rpc::Aggregation*>(
      &::rpc::_Aggregation_default_instance_);
}
inline const ::rpc::Aggregation& AggregateResponse::new_agg() const {
  // @@protoc_insertion_point(field_get:rpc.AggregateResponse.new_agg)
  return _internal_new_agg();
}
inline void AggregateResponse::unsafe_arena_set_allocated_new_agg(
    ::rpc::Aggregation* new_agg) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_agg_);
  }
  new_agg_ = new_agg;
  if (new_agg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rpc.AggregateResponse.new_agg)
}
inline ::rpc::Aggregation* AggregateResponse::release_new_agg() {
  auto temp = unsafe_arena_release_new_agg();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::rpc::Aggregation* AggregateResponse::unsafe_arena_release_new_agg() {
  // @@protoc_insertion_point(field_release:rpc.AggregateResponse.new_agg)
  
  ::rpc::Aggregation* temp = new_agg_;
  new_agg_ = nullptr;
  return temp;
}
inline ::rpc::Aggregation* AggregateResponse::_internal_mutable_new_agg() {
  
  if (new_agg_ == nullptr) {
    auto* p = CreateMaybeMessage<::rpc::Aggregation>(GetArena());
    new_agg_ = p;
  }
  return new_agg_;
}
inline ::rpc::Aggregation* AggregateResponse::mutable_new_agg() {
  // @@protoc_insertion_point(field_mutable:rpc.AggregateResponse.new_agg)
  return _internal_mutable_new_agg();
}
inline void AggregateResponse::set_allocated_new_agg(::rpc::Aggregation* new_agg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete new_agg_;
  }
  if (new_agg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(new_agg);
    if (message_arena != submessage_arena) {
      new_agg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_agg, submessage_arena);
    }
    
  } else {
    
  }
  new_agg_ = new_agg;
  // @@protoc_insertion_point(field_set_allocated:rpc.AggregateResponse.new_agg)
}

// -------------------------------------------------------------------

// Empty

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_enclave_2eproto
